package filehandler

import (
  "io/ioutil"
  "fmt"
  "regexp"
  "strings"
  "automaton/libs/logger"
)

func read_file (cfg_file *string) (filein []string){
  caller := "filehandler :: read_file"
  fil,err := ioutil.ReadFile(*cfg_file)
  if err != nil {
    logger.Errlog (&err,1,&caller)
  }

  filein = strings.Split(string(fil), "\n")
  return filein
}

func Read_cfg (cfg_type *string, cfg_file *string, cfg_handle *string) {
  caller := "filehandler :: read_cfg"

  switch *cfg_type {
    case "cfgpars":
      fcon := read_file(cfg_file)
      for i := 0;i<len(fcon);i++ {
        if match,_ := regexp.MatchString("^[#]+",fcon[i]); match {
          fmt.Println ("skipping the matched line : ", match)
        }  else {
          fmt.Println ("Printing and saving: ", fcon[i])
        }
      }

    case "genericpars":
    case "rulespars":
    case "passpars":
    case "shadpars":
    case "grouppars":
    case "userpars":
    case "mailpars":
      switch *cfg_handle {
        case "generic":
        case "alert":
        default:
      }
    default:
  }
}

/*
  package main

  import (
    "os"
    "regexp"
    "fmt"
  )

  func main() {
    if len(os.Args) == 1 {
      fmt.Println("Usage: regexp [string]")
      os.Exit(1)
    } else if m, _ := regexp.MatchString("^[0-9]+$", os.Args[1]); m {
      fmt.Println("Totally numbers")
    } else {
      fmt.Println("Totally not numbers")
    }
  }


  func readFile(path string) (lines []string, err error) {
      var (
          file *os.File
          part []byte
          prefix bool
      )
      if file, err = os.Open(path); err != nil {
          return
      }
      defer file.Close()

      reader := bufio.NewReader(file)
      buffer := bytes.NewBuffer(make([]byte, 0))
      for {
          if part, prefix, err = reader.ReadLine(); err != nil {
              break
          }
          buffer.Write(part)
          if !prefix {
              lines = append(lines, buffer.String())
              buffer.Reset()
          }
      }
      if err == io.EOF {
          err = nil
      }
      return
  }
*/
